import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime

# Parameters
company_ticker = "AAPL"
start_date = '2015-01-01'
n_simulations = 5000
n_days = 60

# Data Retrieval
stock = yf.Ticker(company_ticker)
stock_data = stock.history(start=start_date)

# Log Returns
log_returns = np.log(1 + stock_data['Close'].pct_change()).dropna()

# Volatility
daily_volatility = np.std(log_returns)

# Monte Carlo Simulation
last_close = stock_data['Close'].iloc[-1]
simulations = []
for _ in range(n_simulations):
    prices = [last_close]
    for _ in range(1, n_days):
        next_price = prices[-1] * (1 + np.random.normal(0, daily_volatility))
        prices.append(next_price)
    simulations.append(prices)
simulation_df = pd.DataFrame(simulations).transpose()

# Plot: Close Price
plt.figure(figsize=(10, 3))
plt.plot(stock_data['Close'], color='darkcyan', label='AAPL Close Price')
plt.title('Apple (AAPL) Closing Price Since 2015', color='navy')
plt.xlabel('Trading Date', color='firebrick')
plt.ylabel('Close Price (USD)', color='firebrick')
plt.legend()
plt.grid(True, color='lightgray')
plt.show()

# Plot: Log Returns
plt.figure(figsize=(8, 4))
plt.plot(log_returns, color='darkorange', label='AAPL Log Returns')
plt.title('Apple (AAPL) Log Returns Since 2015', color='purple')
plt.xlabel('Index', color='teal')
plt.ylabel('Log Return', color='teal')
plt.legend()
plt.grid(True, color='whitesmoke')
plt.show()

# Plot: Monte Carlo Simulations
plt.figure(figsize=(14, 5))
for i in range(min(50, n_simulations)):
    plt.plot(simulation_df.iloc[:, i], color='mediumslateblue', alpha=0.08)
plt.axhline(y=last_close, color='orangered', linestyle='--', label='Last Close')
plt.title('Monte Carlo Simulations for Apple (AAPL)', color='darkgreen')
plt.xlabel('Forecast Day', color='slategray')
plt.ylabel('Simulated Price (USD)', color='slategray')
plt.legend()
plt.grid(True, color='gainsboro')
plt.show()

# Confidence Intervals
final_prices = simulation_df.iloc[-1]
mean_price = np.mean(final_prices)
conf_96 = (np.percentile(final_prices, 2), np.percentile(final_prices, 98))
conf_99 = (np.percentile(final_prices, 0.5), np.percentile(final_prices, 99.5))
print(f"Expected value after {n_days} days: {mean_price}")
print(f"96% confidence interval: {conf_96}")
print(f"99% confidence interval: {conf_99}")  

